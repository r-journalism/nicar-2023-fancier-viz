{
  "hash": "cf95334b3c4cbafbec8a42e48a0fe0af",
  "result": {
    "markdown": "---\ntitle: \"ggrepel\"\nformat: html\neditor: visual\n---\n\n\nYou can follow along with the `ggrepel.qmd` file in the **nicar-2023-fancier-viz** project folder that you downloaded in the [**First steps**](data_prep.html)link.\n\nIf you've downloaded the appropriate data files and put them in a data folder, you can just copy and paste all the code in the gray boxes in an R script.\n\nThis time, we're going to use a package called **ggrepel**.\n\nLet's load the libraries, import the state-level data and see the structure of the data we've imported.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nstate_df <- read_csv(\"data/opioids_states.csv\")\n\nglimpse(state_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 918\nColumns: 12\n$ buyer_state <chr> \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\"…\n$ year        <dbl> 2006, 2006, 2007, 2007, 2008, 2008, 2009, 2009, 2010, 2010…\n$ pills       <dbl> 15667010, 15667010, 17272433, 17272433, 18707811, 18707811…\n$ state       <chr> \"Alaska\", \"Alaska\", \"Alaska\", \"Alaska\", \"Alaska\", \"Alaska\"…\n$ deaths      <dbl> 29, 29, 15, 15, 88, 88, 90, 90, 62, 62, 66, 66, 81, 81, 69…\n$ population  <dbl> 675302, 675302, 680300, 680300, 687455, 687455, 698895, 69…\n$ crude_rate  <chr> \"4.3\", \"4.3\", \"Unreliable\", \"Unreliable\", \"12.8\", \"12.8\", …\n$ type        <chr> \"death_per_1m\", \"pills_per_person\", \"death_per_1m\", \"pills…\n$ rate        <dbl> 42.9, 23.2, 22.0, 25.4, 128.0, 27.2, 128.8, 28.8, 87.3, 29…\n$ state_code  <chr> \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\", \"AK\"…\n$ region      <chr> \"West\", \"West\", \"West\", \"West\", \"West\", \"West\", \"West\", \"W…\n$ division    <chr> \"Pacific\", \"Pacific\", \"Pacific\", \"Pacific\", \"Pacific\", \"Pa…\n```\n:::\n:::\n\n\nBefore we proceed, let's slice out the 2006 data only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_df_06 <-state_df %>% \n  filter(year==2006) %>% \n  pivot_wider(names_from=\"type\", values_from=\"rate\")\n\nglimpse(state_df_06)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 51\nColumns: 12\n$ buyer_state      <chr> \"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\",…\n$ year             <dbl> 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,…\n$ pills            <dbl> 15667010, 174362638, 88505157, 177223504, 859369650, …\n$ state            <chr> \"Alaska\", \"Alabama\", \"Arkansas\", \"Arizona\", \"Californ…\n$ deaths           <dbl> 29, 124, 140, 459, 1511, 326, 224, 55, 37, 1223, 331,…\n$ population       <dbl> 675302, 4628981, 2821761, 6029141, 36021202, 4720423,…\n$ crude_rate       <chr> \"4.3\", \"2.7\", \"5.0\", \"7.6\", \"4.2\", \"6.9\", \"6.4\", \"9.6…\n$ state_code       <chr> \"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DC\", \"DE\",…\n$ region           <chr> \"West\", \"South\", \"South\", \"West\", \"West\", \"West\", \"No…\n$ division         <chr> \"Pacific\", \"East South Central\", \"West South Central\"…\n$ death_per_1m     <dbl> 42.9, 26.8, 49.6, 76.1, 41.9, 69.1, 63.7, 96.4, 43.1,…\n$ pills_per_person <dbl> 23.2, 37.7, 31.4, 29.4, 23.9, 22.9, 22.5, 11.5, 33.5,…\n```\n:::\n:::\n\n\nOkay, we went from 918 rows of data to 51.\n\nLet's see if there's a relationship between rates of opioid purchases and opioid deaths in 2006.\n\nWe'll plot it out with `geom_point()` from the ggplot2 package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(state_df_06, aes(x=death_per_1m, y=pills_per_person)) +\n  geom_point() +\n  geom_smooth(method='lm') +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggrepel_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nAlright, so it definitely looks like there's something interesting here.\n\nBut it'd be nice to be able to see right away which dots represent which states.\n\nThe default method of showing text in ggplot2 is the function `geom_text()`.\n\nLet's try it below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(state_df_06, aes(x=death_per_1m, y=pills_per_person)) +\n  geom_point() +\n  geom_smooth(method='lm') +\n  geom_text(aes(label=buyer_state), size=3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggrepel_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nYuck, it pops up right where the dots appear. We need to move it over.\n\nYou can pass it the argument `hjust` and change the number till it's just right.\n\nTry it with .5 pixels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(state_df_06, aes(x=death_per_1m, y=pills_per_person)) +\n  geom_point() +\n  geom_smooth(method='lm') +\n# Changing this line \n# geom_text(aes(label=buyer_state), size=3) +\n  geom_text(aes(label=buyer_state), hjust=-.5, size=3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggrepel_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nHrm, still not great. Look at the two dots under \"UT\" -- \"RNM\"? What is that?\n\nLet's use the package **ggrepel** that members of the data community made that automatically moves text labels for you based on proximity of other labels.\n\nInstead of the function `geom_text()`, use the function `geom_text_repel().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(state_df_06, aes(x=death_per_1m, y=pills_per_person)) +\n  geom_point() +\n  geom_smooth(method='lm') +\n# Changing this line \n# geom_text(aes(label=buyer_state), hjust=-.5, size=3) +\n  geom_text_repel(aes(label=buyer_state), size=3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggrepel_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nBeautiful! and so easy!\n\nNow, you can save it as a pdf or svg and tinker with it even more in Illustrator before publishing.\n\nLet me show you a way to show only the labels for outliers. Let's say those with more than 120 deaths per million. It requires some nested data wrangling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(state_df_06, aes(x=death_per_1m, y=pills_per_person)) +\n  geom_point() +\n  geom_smooth(method='lm') +\n# Changing this line\n# geom_text_repel(aes(label=buyer_state), size=3) +\n  geom_text_repel(data= . %>% \n                  mutate(new_label=ifelse(death_per_1m>120,\n                                        buyer_state, \"\")),\n                  aes(label=new_label), size=3) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggrepel_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nA little complicated, but you just have to see it in action and you can repurpose it for what you need.\n\nLet's go back and put in all the years and see what the pattern is once we display the data in small multiples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_df_wide <-state_df %>% \n  #filter(year==2006) %>% \n  pivot_wider(names_from=\"type\", values_from=\"rate\")\n\nggplot(state_df_wide, aes(x=death_per_1m, y=pills_per_person)) +\n  geom_point() +\n  geom_text_repel(data= . %>% \n                  mutate(new_label=ifelse(death_per_1m>120,\n                                        buyer_state, \"\")),\n                  aes(label=new_label), size=3) +\n# new line below\n  facet_wrap(~year, ncol=2) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggrepel_files/figure-html/unnamed-chunk-7-1.png){width=864}\n:::\n:::\n\n\nIt's very illuminating to compare 2006 to 2014.\n\nThat could make for an interesting GIF, right?\n\nLet's move on to [**gganimate**](gganimate.html).\n",
    "supporting": [
      "ggrepel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}