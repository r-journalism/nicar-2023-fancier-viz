{
  "hash": "7d47387a37388d49b4942230effe7e4d",
  "result": {
    "markdown": "---\ntitle: \"bivariate maps\"\nformat: html\neditor: visual\n---\n\n\nYou can follow along with the `bivariate_map.qmd` file in the **nicar-2023-fancier-viz** project folder that you downloaded in the First steps link.\n\nIf you've downloaded the appropriate data files and put them in a data folder, you can just copy and paste all the code in the gray boxes in an R script.\n\nThis time, we're going to use a few packages: **biscale**, **cowplot**, **sf**, and **tigris**.\n\nLet's load the libraries, import the state-level data and see the structure of the data we've imported.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(cowplot)\nlibrary(biscale)\nlibrary(tigris)\n\ncounty_df <- read_csv(\"data/opioids_counties_combined.csv\")\n\n\ncounty_df_wide <-  county_df %>% \n  pivot_wider(names_from=\"type\", values_from=\"rate\")\n\nglimpse(county_df_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,135\nColumns: 12\n$ buyer_county     <chr> \"ABBEVILLE\", \"ACADIA\", \"ACCOMACK\", \"ADA\", \"ADAIR\", \"A…\n$ buyer_state      <chr> \"SC\", \"LA\", \"VA\", \"ID\", \"IA\", \"KY\", \"MO\", \"OK\", \"CO\",…\n$ countyfips       <chr> \"45001\", \"22001\", \"51001\", \"16001\", \"19001\", \"21001\",…\n$ count            <dbl> 10749, 55952, 19536, 290484, 5752, 21985, 32206, 2328…\n$ dosage_unit      <dbl> 4591000, 22197708, 6660470, 136806828, 1783165, 87831…\n$ state            <chr> NA, \"Louisiana\", \"Virginia\", \"Idaho\", NA, \"Kentucky\",…\n$ county           <chr> NA, \"Acadia Parish, LA\", \"Accomack County, VA\", \"Ada …\n$ deaths           <dbl> NA, 39, 22, 269, NA, 14, 13, 19, 402, NA, NA, 32, NA,…\n$ year             <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,…\n$ population       <dbl> 25100, 62031, 33165, 409239, 7543, 19032, 25642, 2238…\n$ death_per_100k   <dbl> NA, 62.9, 66.3, 65.7, NA, 73.6, 50.7, 84.9, 87.1, NA,…\n$ pills_per_person <dbl> 182.9, 357.8, 200.8, 334.3, 236.4, 461.5, 461.1, 384.…\n```\n:::\n:::\n\n\nThis is how The Washington Post visualized the geographical relationship between [overdoses and purchases](https://www.washingtonpost.com/graphics/2019/investigations/dea-pain-pill-database/) in their first story.\n\n![](images/compare.png){fig-align=\"center\"}\n\nVery easy idea, right? Low values, lighter colors, high values, darker colors.\n\n![](https://www.joshuastevens.net/images/js_bivariateGrid3.png){fig-align=\"center\"}\n\nBut what if we flipped one of the color schemes in the legend 90 degrees...\n\n![](https://www.joshuastevens.net/images/js_bivariateGrid4.png){fig-align=\"center\"}\n\nAnd theeeeen...\n\nBlend them together like so...\n\n![](https://www.joshuastevens.net/images/js_bivariateMix.gif){fig-align=\"center\"}\n\nWe've gone from three colors to nine!\n\nThis is a bivariate color scheme you've got going!\n\nWhat's it take normally?\n\nIt's a little complicated-- it requires dividing up your values into quantiles.\n\n![](images/classify.png){fig-align=\"center\"}\n\nOnce you have the combined labels you can assign them to a color palette that matches the bivariate theme.\n\n![](https://www.joshuastevens.net/images/js_bivariateLabels.png){fig-align=\"center\"}\n\nOkay, that's a lot of steps.\n\nBut someone made a package that simplifies it for us!\n\nWe'll use the [**biscale**](https://chris-prener.github.io/biscale/) package to quantile-ize and categorize the data for us.\n\nFirst, let's look at the data again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(county_df_wide)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,135\nColumns: 12\n$ buyer_county     <chr> \"ABBEVILLE\", \"ACADIA\", \"ACCOMACK\", \"ADA\", \"ADAIR\", \"A…\n$ buyer_state      <chr> \"SC\", \"LA\", \"VA\", \"ID\", \"IA\", \"KY\", \"MO\", \"OK\", \"CO\",…\n$ countyfips       <chr> \"45001\", \"22001\", \"51001\", \"16001\", \"19001\", \"21001\",…\n$ count            <dbl> 10749, 55952, 19536, 290484, 5752, 21985, 32206, 2328…\n$ dosage_unit      <dbl> 4591000, 22197708, 6660470, 136806828, 1783165, 87831…\n$ state            <chr> NA, \"Louisiana\", \"Virginia\", \"Idaho\", NA, \"Kentucky\",…\n$ county           <chr> NA, \"Acadia Parish, LA\", \"Accomack County, VA\", \"Ada …\n$ deaths           <dbl> NA, 39, 22, 269, NA, 14, 13, 19, 402, NA, NA, 32, NA,…\n$ year             <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,…\n$ population       <dbl> 25100, 62031, 33165, 409239, 7543, 19032, 25642, 2238…\n$ death_per_100k   <dbl> NA, 62.9, 66.3, 65.7, NA, 73.6, 50.7, 84.9, 87.1, NA,…\n$ pills_per_person <dbl> 182.9, 357.8, 200.8, 334.3, 236.4, 461.5, 461.1, 384.…\n```\n:::\n:::\n\n\nNext, we need to use the function `bi_class()` and feed it the arguments for the two columns we want to turn into quantiles. Also, we can set the dimensions to 3x3 (you could do 4x4, etc).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbi_df <- bi_class(county_df_wide, x = death_per_100k, y = pills_per_person, style = \"quantile\", dim = 3)\n\nglimpse(bi_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,135\nColumns: 13\n$ buyer_county     <chr> \"ABBEVILLE\", \"ACADIA\", \"ACCOMACK\", \"ADA\", \"ADAIR\", \"A…\n$ buyer_state      <chr> \"SC\", \"LA\", \"VA\", \"ID\", \"IA\", \"KY\", \"MO\", \"OK\", \"CO\",…\n$ countyfips       <chr> \"45001\", \"22001\", \"51001\", \"16001\", \"19001\", \"21001\",…\n$ count            <dbl> 10749, 55952, 19536, 290484, 5752, 21985, 32206, 2328…\n$ dosage_unit      <dbl> 4591000, 22197708, 6660470, 136806828, 1783165, 87831…\n$ state            <chr> NA, \"Louisiana\", \"Virginia\", \"Idaho\", NA, \"Kentucky\",…\n$ county           <chr> NA, \"Acadia Parish, LA\", \"Accomack County, VA\", \"Ada …\n$ deaths           <dbl> NA, 39, 22, 269, NA, 14, 13, 19, 402, NA, NA, 32, NA,…\n$ year             <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,…\n$ population       <dbl> 25100, 62031, 33165, 409239, 7543, 19032, 25642, 2238…\n$ death_per_100k   <dbl> NA, 62.9, 66.3, 65.7, NA, 73.6, 50.7, 84.9, 87.1, NA,…\n$ pills_per_person <dbl> 182.9, 357.8, 200.8, 334.3, 236.4, 461.5, 461.1, 384.…\n$ bi_class         <chr> \"NA-1\", \"2-2\", \"2-1\", \"2-2\", \"NA-1\", \"2-3\", \"1-3\", \"2…\n```\n:::\n:::\n\nGreat, do you see the `bi_class` column? That's what we're looking for.\n\nNow we can map it. \n\nYou can export the data frame above and bring it into Datawrapper and individually create an interactive choropleth map based on the **bi_class** column. It's totally doable! Check out their recent [blog post](https://blog.datawrapper.de/bivariate-map-scatter-plot/) on playing around with bivariate maps.\n\nThey haven't made the option seamless yet. It'll require a lot of tweaking.\n\nIn the meantime, just go ahead and make a map with ggplot2.\n\nFirst, let's download the counties shapefile from the Census using the **tigris** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_counties <- counties(cb = TRUE, resolution = \"20m\") %>%\n     shift_geometry()\n\nglimpse(us_counties)\n```\n:::\n\n\nJust to check, let's see what it looks like without data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_counties) + \n  geom_sf() +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](bivariate_map_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nOkay, now we can join the shapefile with the bivariate data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_counties <- us_counties %>% \n  left_join(bi_df, by=c(\"GEOID\"=\"countyfips\"))\n```\n:::\n\n\nNow, we simply map it.\n\nFor the color, we need to use the function `bi_scale_fill()` to accurately represent the bivariate categories with colors. Check out all the [palette options](https://chris-prener.github.io/biscale/articles/bivariate_palettes.html). We're going go with \"DkViolet\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap <- ggplot() +\n  geom_sf(data = us_counties, mapping = aes(fill = bi_class), \n          # changing the border color to white and the size of the\n          # border lines to .1\n          # and hiding the legend\n          color = \"white\", size = 0.1, \n           show.legend = FALSE) +\n  bi_scale_fill(pal = \"DkViolet\", dim = 3, na.value=\"white\",) +\n  labs(\n    title = \"Deaths & Pills\"\n  ) +\n  bi_theme()\nmap\n```\n\n::: {.cell-output-display}\n![](bivariate_map_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nAlright, we're not done, yet.\n\nLet's create a legend with custom labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlegend <- bi_legend(pal = \"DkViolet\",\n                    dim = 3,\n                    xlab = \"+ death rate \",\n                    ylab = \"+ pills rate \",\n                    size = 8)\n\nlegend\n```\n\n::: {.cell-output-display}\n![](bivariate_map_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nPretty huge, yes.\n\nBut we're going to use the package **cowplot** to combine these two viz objects in one. It'll initiate with the function `ggdraw()`.\n\nThe numbers in `draw_plot()` represent the relative spots to anchor the viz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinalPlot <- ggdraw() +\n  draw_plot(map, 0, 0, 1, 1) +\n  draw_plot(legend, 0.82, .2, 0.2, 0.2)\n\nfinalPlot\n```\n\n::: {.cell-output-display}\n![](bivariate_map_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\nNow you can save it as a png or a svg file to edit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_plot(\"test.svg\", finalPlot, base_height = NULL, base_width = 12)\n```\n:::\n\n\nLet's do it one more time but zoomed in on Tennesee.\n\nWe can do the same thing above but we'll simply filter it real quick before using the same code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntn_counties <- us_counties %>% \n  filter(buyer_state==\"TN\")\n\nmap <- ggplot() +\n  geom_sf(data = tn_counties, mapping = aes(fill = bi_class), \n          # changing the border color to white and the size of the\n          # border lines to .1\n          # and hiding the legend\n          color = \"white\", size = 0.1, show.legend = FALSE) +\n  bi_scale_fill(pal = \"GrPink\", dim = 3) +\n  labs(\n    title = \"Deaths & Pills in Tenn.\"\n  ) +\n  bi_theme()\n\n\nfinalPlot <- ggdraw() +\n  draw_plot(map, 0, 0, 1, 1) +\n  draw_plot(legend, 0.82, .2, 0.2, 0.2)\n\nfinalPlot\n```\n\n::: {.cell-output-display}\n![](bivariate_map_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nAnd that's it.\n\nDefinitely check out the rest of the documentation of [biscale](https://chris-prener.github.io/biscale/articles/biscale.html).\n\nDo we even have time to make a fifth viz? Let's give it a shot.\n\nMove on to [ggtext](ggtext.html).\n",
    "supporting": [
      "bivariate_map_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}