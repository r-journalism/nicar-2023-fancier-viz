{
  "hash": "f430cab31210b228df2a26cb9905d626",
  "result": {
    "markdown": "---\ntitle: \"crosstalk flexdashboard\"\nformat: html\neditor: visual\n---\n\n\n\n\nSometimes you need an interactive map that you can host internally for reporting purposes, maybe to show an editor or fellow reporters. \n\nWe're going to build on what we've already learned and use two really new packages: [crosstalk](https://rstudio.github.io/crosstalk/) and [flexdashboard](https://rmarkdown.rstudio.com/flexdashboard/).\n\n## Crosstalk\n\nCrosstalk builds on top of the [htmlwidgets](https://htmlwidgets.org/) package (which has been creating all the stuff you've been putting in iframes from R) by letting different elements \"talk\" to each other. \n\n![](images/cross1.png)\n\nThis lets you alter one interactive by clicking around in another. Usually for filtering.\n\nThis level of control is something that one would have to create in R using Shiny, which would require a server and perhaps Docker knowledge.\n\nBut Crosstalk doesn't require Shiny. You can use it alone or use R Markdown to generate a static HTML document you can host anywhere. \n\n**Some limitations:** At the moment it can only links individual data points and not aggregate or summary views. The next big limitation is that you shouldn't use it for huge data sets because it will be all served in a browser.\n\n## Flexdashboard\n\n[Flexdashboard](https://rmarkdown.rstudio.com/flexdashboard/index.html) is simply a package that helps organize [interactive dashboards](https://rmarkdown.rstudio.com/flexdashboard/examples.html) using [bootstrap](https://getbootstrap.com/).\n\n## The plan\n\nWe're going to create a truly interactive map and table to visualize pharmacy-level data in Louisana. The data is from the [arcos api](https://wpinvestigative.github.io/arcos/). Basic packages we'll use include [rleaflet](https://rstudio.github.io/leaflet/) and [DT: DataTables](https://rstudio.github.io/DT/).\n\nI'll be referring to different .Rmd files to work from as well as screenshots of the results. I'll be highlighing code in this walkthrough but the code won't really work in your console. \n\nYou must click the *Knit > Knit to flex_dashboard* button to execute and generate the html file.\n\n![](images/knit.png)\n\nThe repo containing the data and scripts for this section is on Github. \nTo follow along, simply run the lines of code below in R.\n\n-----\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# There is no need to run these install lines below if you already have done so\ninstall.packages(\"usethis\")\nusethis::use_course(\"https://github.com/andrewbtran/NICAR-2020-mapping/archive/master.zip\")\n\n# This section is in scripts/07_crosstalk_01.Rmd\n# This section is in scripts/07_crosstalk_02.Rmd\n# This section is in scripts/07_crosstalk_03.Rmd\n# This section is in scripts/07_crosstalk_04.Rmd\n\nfile.edit(\"scripts/07_crosstalk_01.Rmd\")\nfile.edit(\"scripts/07_crosstalk_02.Rmd\")\nfile.edit(\"scripts/07_crosstalk_03.Rmd\")\nfile.edit(\"scripts/07_crosstalk_04.Rmd\")\n```\n:::\n\n\n----\n\nWe're going to build this in R Markdown.\n\nThe progression of code will be in `07_crosstalk_01.Rmd` through `07_crosstalk_04.Rmd`.\n\n## The data\n\nWe're working with data I've already joined and summarized based on raw arcos data.\n\nIf you want to see the code looks like, it's in the script folder called `99_state_pharm_data.R`\n\nThis is what the summarized data looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nstate <- read_csv(\"data/all_pharmacies_summarized.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 82813 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): BUYER_DEA_NO, BUYER_STATE, BUYER_COUNTY, countyfips, BUYER_BUS_ACT...\ndbl  (7): lat, lon, total_dosage_unit, total_records, average_population, pe...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(state)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 82,813\nColumns: 17\n$ BUYER_DEA_NO       <chr> \"BR5156078\", \"BW4707139\", \"BN5150141\", \"FH2332233\",…\n$ BUYER_STATE        <chr> \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL…\n$ BUYER_COUNTY       <chr> \"BALDWIN\", \"BALDWIN\", \"BALDWIN\", \"BALDWIN\", \"BALDWI…\n$ lat                <dbl> 30.8804, 30.8859, 30.9046, 30.8838, 30.8826, 30.884…\n$ lon                <dbl> -87.7845, -87.7867, -87.7839, -87.7893, -87.7734, -…\n$ total_dosage_unit  <dbl> 1901530, 1481300, 1308370, 326720, 231570, 132680, …\n$ total_records      <dbl> 2056, 6035, 3902, 1400, 936, 289, 35, 11, 1232, 589…\n$ countyfips         <chr> \"01003\", \"01003\", \"01003\", \"01003\", \"01003\", \"01003…\n$ average_population <dbl> 175270, 175270, 175270, 175270, 175270, 175270, 175…\n$ per_person         <dbl> 1.5, 1.2, 1.1, 0.3, 0.2, 0.1, 0.0, 0.0, 1.8, 0.8, 3…\n$ BUYER_BUS_ACT      <chr> \"CHAIN PHARMACY\", \"CHAIN PHARMACY\", \"RETAIL PHARMAC…\n$ BUYER_NAME         <chr> \"ALABAMA CVS PHARMACY, L.L.C.\", \"WINN-DIXIE PHARMAC…\n$ BUYER_ADDRESS1     <chr> \"208 MCMEANS AVE.\", \"710 MCMEANS AVE\", \"2012 HAND A…\n$ BUYER_CITY         <chr> \"BAY MINETTE\", \"BAY MINETTE\", \"BAY MINETTE\", \"BAY M…\n$ BUYER_ZIP          <dbl> 36507, 36507, 36507, 36507, 36507, 36507, 36535, 36…\n$ BUYER_ADDL_CO_INFO <chr> \"DBA: CVS/PHARMACY  # 04938\", NA, NA, \"DBA BELL'S H…\n$ BUYER_ADDRESS2     <chr> NA, NA, NA, NA, NA, NA, NA, \"SUITE 101\", NA, \"69005…\n```\n:::\n:::\n\n\nIt's every store in the country. It has total pills (oxycodone and hydrocodone) within the time span of our data. And it has `per_person` which adjusts total for population by county. **Most importantly,** each pharmacy has latitude and longitude data so we can use to put these locations on a map.\n\n## Setting up the flex dashboard structure\n\nThis section is in `07_crosstalk_01.Rmd`.\n\nThe first thing you'll notice at the top of the .Rmd file is the text between the **---** signs. This is the [yaml](https://yaml.org/) part of the file that tells RStudio how to knit the file. Sometimes the output is pdf, sometimes it's html, sometime it's simple markdown.\n\nIn this instance, we're exporting this file as a flex dashboard, with a [theme](https://www.datadreaming.org/post/r-markdown-theme-gallery/) of paper (You could come up with [your own theme](https://ijlyttle.github.io/communicate_custom_html_document_format_r_markdown.html) if your organization wants a consistent style). \n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"Crosstalk 1\"\nauthor: \"NICAR 2020\"\ndate: \"3/5/2020\"\noutput:\n  flexdashboard::flex_dashboard:\n    theme: paper\n    source_code: embed\n---\n```\n:::\n\n\nOkay, that's basic.\n\nBeneath it are the sections of code that are indicated with a **````{r`**.\n\n![](images/chunk1.png)\n\nAnything within this chunk will be treating like a specific code. \n\nThe \"r\" in **````{r`** indicates that R code will be executed.\n\nIf you put in **````{python`** then Python code would be executed in the R markdown.\n\nAnything outside of these **```** will be treated like regular markdown.\n\nTake the time to learn more ways to customize [**your R Markdown code**](https://rmarkdown.rstudio.com/lesson-1.html).\n\nThe important thing to understand is this next set of code that sets up the modules you want to show with flex dashboard. Check out [their documentation](https://rmarkdown.rstudio.com/flexdashboard/using.html#layout).\n\n```\nOpioids in State {data-icon=\"ion-stats-bars\"}\n=====================================  \n\nColumn {data-width=200}\n-------------------------------------\n\n### Filters\n```\n\nThis is specific markdown code that flex dashboard recognizes.\n\nIt takes data from the yaml section and the text in the code above and sets the header, the column width and what to name that particular section.\n\nWe're only going to print text in each R code chunk to see where things end up.\n\nClick *Knit > Knit to flex_dashboard* on the `07_crosstalk_01.Rmd` file.\n\n![](images/flexdash1.png)\n\nPretty nice, right?\n\nEven nicer considering how we typed zero HTML and CSS.\n\n## Loading and displaying data pt 1\n\nThis section is in `07_crosstalk_02.Rmd`.\n\nAlright, let's bring in data and show what it looks like as a filterable table.\n\nWe're going to skip the filtering part for now.\n\nWe looked at it in our console already but we need to load it into the R markdown file.\n\nLook in the new chunk called `load_and_clean_data`\n\n![](images/chunk2.png)\n\nThe important takeaway here is that after loading and filtering the data frame and storing it as `state`, we then used the `SharedData$new()` function to convert `state` into a crosstalk object.\n\nThis is like an enhanced data set. You'll see why in a bit.\n\nLook at the `filterable_table` chunk, now.\n\n![](images/chunk3.png)\n\nWe've used the `datatable()` function to show the `st` crosstalk dataframe object.\n\nClick *Knit > Knit to flex_dashboard* on the `07_crosstalk_02.Rmd` file.\n\n![](images/flexdash2.png)\n\n## Setting up custom filters\n\nThis section is in `07_crosstalk_03.Rmd`.\n\nWe're going to alter the `filter_section` code chunk.\n\n![](images/chunk4.png)\n\nWe're using a few crosstalk specific filter functions: `filter_select()`, `filter_checkbox()`, and `filter_slider()` that will let us choose how to filter the **st** shared data object.\n\nWe've wrapped a couple of them around an additional function: `bscols()` that will pair up a couple of the narrower filters so it looks pretty.\n\nClick *Knit > Knit to flex_dashboard* on the `07_crosstalk_03.Rmd` file.\n\n![](images/flexdash3.png)\n\nNeat, huh?\n\nWhen we add filters on the left, either with a pull down menu or with the check box or via the slider bar, the table on the right will automatically update.\n\n## Interactive map\n\nThis section is in `07_crosstalk_04.Rmd`.\n\nWe're going to alter the `interactive_map` code chunk.\n\nYou've gone through the leaflet section before. Now, this is tricky.\n\nWe're starting with the **st** crosstalk shared object but the values we're setting for radius (`addCircles()`) and the text that we're using to generate the popup text are based on the original **state** dataframe. \n\n![](images/chunk5.png)\n\nAlso, you might have noticed I added some custom images to the popups depending on the **BUYER_DEA_NO**. These files are specific to Louisiana and show a pharmacy's monthly opioid ordering trend compared to the state average.\n\nClick *Knit > Knit to flex_dashboard* on the `07_crosstalk_04.Rmd` file.\n\n![](images/flexdash4.png)\n\n## Final datatable options\n\nAlmost done. Let's go back and add some variables to the `datable()` function so we can add some neat customization to it, such as buttons to export the filtered data and scrolling options.\n\nThis section is in `07_crosstalk_05.Rmd`.\n\nWe're going to alter the `filterable_table` code chunk.\n\nHere's a preview of what we're changing.\n\nFor complete documentation of what's available as DT options, visit [their site](https://rstudio.github.io/DT/).\n\n![](images/chunk6.png)\n\nClick *Knit > Knit to flex_dashboard* on the `07_crosstalk_05.Rmd` file.\n\n![](images/flexdash5.png)\n\nBeautiful, no?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}