{"title":"gganimate","markdown":{"yaml":{"title":"gganimate","format":"html","editor":"visual"},"headingText":"| warning: FALSE","containsRefs":false,"markdown":"\n\nAnimated viz is great at engaging people, especially on social media.\n\nYou can follow along with the `gganimate.qmd` file in the **nicar-2023-fancier-viz** project folder that you downloaded in the First steps link.\n\nIf you've downloaded the appropriate data files and put them in a data folder, you can just copy and paste all the code in the gray boxes in an R script.\n\nWe're going to try a package called [**gganimate**](https://gganimate.com/)**.**\n\nLet's load the libraries, import the state-level data and see the structure of the data we've imported.\n\n```{r}\n#| message: FALSE\n\n\nlibrary(tidyverse)\nlibrary(gganimate)\n\nstate_df <- read_csv(\"data/opioids_states.csv\")\n\nstate_df_wide <-  state_df %>% \n  pivot_wider(names_from=\"type\", values_from=\"rate\")\n\nglimpse(state_df_wide)\n```\n\nOkay, let's make a nicer version of the scatterplot we created in `ggrepel.qmd`.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\n# Let's save the ggplot steps into the object: p\np <- ggplot(\n  state_df_wide,\n  aes(x=death_per_1m, y=pills_per_person, \n      size=population, color=region)\n  ) +\n  geom_point(\n    alpha = 0.7#,\n    #show.legend = FALSE\n  ) +\n  labs(\n    x = \"Deaths per 1 million residents\",\n    y = \"Pills per person\"\n  ) +\n  theme_minimal()\np\n```\n\n### How to use gganimate\n\nYou basically need a ggplot2 viz and then think about these 3 things\n\n-   **transitions:** Data should change\n\n-   **views:** Does the viewpoint need to change\n\n-   **shadows:** Should the viz have memory\n\nLet's add the function `transition_time()` and use the variable **year**.\n\nWe're starting out with the ggplot2 code we saved to the object `p` and building onto it.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nanim <- p +\n  transition_time(year)\n\nanim\n```\n\nThat's pretty damn cool!\n\nAnd so simple! All that from one function!\n\n(Okay, not so simple, we had to structure the data correctly)\n\nBut let's add some labels so we know what the timeline is.\n\nWe're going to add `labs()` with a special `{frame_time}` argument.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nanim <- p +\n  transition_time(year) +\n  labs(title = 'Year: {frame_time}')\n\nanim\n```\n\nOof, it's a little exacting with the frame time.\n\nWe can wrap up the **year** variable with a `as.integer()` function to fix it.\n\nAlso, let's add a `shadow_wake()` function.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nanim <- p +\n  transition_time(as.integer(year)) +\n  labs(title = 'Year: {frame_time}') +\n  shadow_wake(wake_length = 0.1,\n              alpha = FALSE)\n\nanim\n```\n\nMuch better!\n\nOkay, let's try one other `shadow_mark()` function.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nanim <- p +\n  transition_time(as.integer(year)) +\n  labs(title = 'Year: {frame_time}') +\n  shadow_mark(alpha = 0.3,\n              size = 0.5)\n\nanim\n```\n\nHm, not a big fan of that one. Oh well.\n\nOkay, one more chart!\n\nLet's slice out Tennesee from the data and make a line chart like we did in the `geofacet.qmd` file.\n\n```{r }\n#| warning: FALSE\n#| message: FALSE\n\np <- state_df %>% \n  filter(state==\"Tennessee\") %>% \n  ggplot(aes(x=year, y=rate, color=type)) +\n  geom_line() +\n  theme_minimal() +\n  theme(legend.position = 'bottom') +\n  labs(title=\"Rates of opioid purchases and deaths in Tennessee\",\n       x = \"Year\",\n       y = \"Rate\")\n\np\n```\n\nBut! Let's make it animated!\n\nThis time, we'll use the `transition_reveal()` function.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\np +\n  transition_reveal(year)\n```\n\nBeautiful!\n\nBut how about some points to highlight the years.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\np +\n  transition_reveal(year) +\n  geom_point(aes(\n    x = year, y=rate,\n    color = type\n  ))\n```\n\nVery cool. This is a really interesting way to add one more time variable to your visualization.\n\nGreat job. If you want to save it as a gif, you can do so through RStudio's plots panel or with the function `[anim_save(https://gganimate.com/reference/index.html)]`\n\nBe sure to check out [gganimate.com](https://gganimate.com/) for more documentation on animating other viz.\n\nLet's go back to visualizing relationships geographically, this time with a **[bivariate](bivariate_map.html)** map.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"gganimate.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":"cosmo","title":"gganimate","editor":"visual"},"extensions":{"book":{"multiFile":true}}}}}