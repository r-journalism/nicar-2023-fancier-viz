{"title":"bivariate maps","markdown":{"yaml":{"title":"bivariate maps","format":"html","editor":"visual"},"headingText":"| warning: FALSE","containsRefs":false,"markdown":"\n\nYou can follow along with the `bivariate_map.qmd` file in the **nicar-2023-fancier-viz** project folder that you downloaded in the First steps link.\n\nIf you've downloaded the appropriate data files and put them in a data folder, you can just copy and paste all the code in the gray boxes in an R script.\n\nThis time, we're going to use a few packages: **biscale**, **cowplot**, **sf**, and **tigris**.\n\nLet's load the libraries, import the state-level data and see the structure of the data we've imported.\n\n```{r}\n#| message: FALSE\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(cowplot)\nlibrary(biscale)\nlibrary(tigris)\n\ncounty_df <- read_csv(\"data/opioids_counties_combined.csv\")\n\n\ncounty_df_wide <-  county_df %>% \n  pivot_wider(names_from=\"type\", values_from=\"rate\")\n\nglimpse(county_df_wide)\n```\n\nThis is how The Washington Post visualized the geographical relationship between [overdoses and purchases](https://www.washingtonpost.com/graphics/2019/investigations/dea-pain-pill-database/) in their first story.\n\n![](images/compare.png){fig-align=\"center\"}\n\nVery easy idea, right? Low values, lighter colors, high values, darker colors.\n\n![](https://www.joshuastevens.net/images/js_bivariateGrid3.png){fig-align=\"center\"}\n\nBut what if we flipped one of the color schemes in the legend 90 degrees...\n\n![](https://www.joshuastevens.net/images/js_bivariateGrid4.png){fig-align=\"center\"}\n\nAnd theeeeen...\n\nBlend them together like so...\n\n![](https://www.joshuastevens.net/images/js_bivariateMix.gif){fig-align=\"center\"}\n\nWe've gone from three colors to nine!\n\nThis is a bivariate color scheme you've got going!\n\nWhat's it take normally?\n\nIt's a little complicated-- it requires dividing up your values into quantiles.\n\n![](images/classify.png){fig-align=\"center\"}\n\nOnce you have the combined labels you can assign them to a color palette that matches the bivariate theme.\n\n![](https://www.joshuastevens.net/images/js_bivariateLabels.png){fig-align=\"center\"}\n\nOkay, that's a lot of steps.\n\nBut someone made a package that simplifies it for us!\n\nWe'll use the [**biscale**](https://chris-prener.github.io/biscale/) package to quantile-ize and categorize the data for us.\n\nFirst, let's look at the data again.\n\n```{r}\nglimpse(county_df_wide)\n```\n\nNext, we need to use the function `bi_class()` and feed it the arguments for the two columns we want to turn into quantiles. Also, we can set the dimensions to 3x3 (you could do 4x4, etc).\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nbi_df <- bi_class(county_df_wide, x = death_per_100k, y = pills_per_person, style = \"quantile\", dim = 3)\n\nglimpse(bi_df)\n```\nGreat, do you see the `bi_class` column? That's what we're looking for.\n\nNow we can map it. \n\nYou can export the data frame above and bring it into Datawrapper and individually create an interactive choropleth map based on the **bi_class** column. It's totally doable! Check out their recent [blog post](https://blog.datawrapper.de/bivariate-map-scatter-plot/) on playing around with bivariate maps.\n\nThey haven't made the option seamless yet. It'll require a lot of tweaking.\n\nIn the meantime, just go ahead and make a map with ggplot2.\n\nFirst, let's download the counties shapefile from the Census using the **tigris** package.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n#| results: 'hide'\nus_counties <- counties(cb = TRUE, resolution = \"20m\") %>%\n     shift_geometry()\n\nglimpse(us_counties)\n```\n\nJust to check, let's see what it looks like without data.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nggplot(us_counties) + \n  geom_sf() +\n  theme_void()\n```\n\nOkay, now we can join the shapefile with the bivariate data.\n\n```{r}\nus_counties <- us_counties %>% \n  left_join(bi_df, by=c(\"GEOID\"=\"countyfips\"))\n```\n\nNow, we simply map it.\n\nFor the color, we need to use the function `bi_scale_fill()` to accurately represent the bivariate categories with colors. Check out all the [palette options](https://chris-prener.github.io/biscale/articles/bivariate_palettes.html). We're going go with \"DkViolet\"\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nmap <- ggplot() +\n  geom_sf(data = us_counties, mapping = aes(fill = bi_class), \n          # changing the border color to white and the size of the\n          # border lines to .1\n          # and hiding the legend\n          color = \"white\", size = 0.1, \n           show.legend = FALSE) +\n  bi_scale_fill(pal = \"DkViolet\", dim = 3, na.value=\"white\",) +\n  labs(\n    title = \"Deaths & Pills\"\n  ) +\n  bi_theme()\nmap\n```\nAlright, we're not done, yet.\n\nLet's create a legend with custom labels.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nlegend <- bi_legend(pal = \"DkViolet\",\n                    dim = 3,\n                    xlab = \"+ death rate \",\n                    ylab = \"+ pills rate \",\n                    size = 8)\n\nlegend\n```\nPretty huge, yes.\n\nBut we're going to use the package **cowplot** to combine these two viz objects in one. It'll initiate with the function `ggdraw()`.\n\nThe numbers in `draw_plot()` represent the relative spots to anchor the viz.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\nfinalPlot <- ggdraw() +\n  draw_plot(map, 0, 0, 1, 1) +\n  draw_plot(legend, 0.82, .2, 0.2, 0.2)\n\nfinalPlot\n```\nNow you can save it as a png or a svg file to edit.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n#| eval: FALSE\n\nsave_plot(\"test.svg\", finalPlot, base_height = NULL, base_width = 12)\n```\n\nLet's do it one more time but zoomed in on Tennesee.\n\nWe can do the same thing above but we'll simply filter it real quick before using the same code.\n\n```{r}\n#| warning: FALSE\n#| message: FALSE\n\ntn_counties <- us_counties %>% \n  filter(buyer_state==\"TN\")\n\nmap <- ggplot() +\n  geom_sf(data = tn_counties, mapping = aes(fill = bi_class), \n          # changing the border color to white and the size of the\n          # border lines to .1\n          # and hiding the legend\n          color = \"white\", size = 0.1, show.legend = FALSE) +\n  bi_scale_fill(pal = \"GrPink\", dim = 3) +\n  labs(\n    title = \"Deaths & Pills in Tenn.\"\n  ) +\n  bi_theme()\n\n\nfinalPlot <- ggdraw() +\n  draw_plot(map, 0, 0, 1, 1) +\n  draw_plot(legend, 0.82, .2, 0.2, 0.2)\n\nfinalPlot\n```\n\nAnd that's it.\n\nDefinitely check out the rest of the documentation of [biscale](https://chris-prener.github.io/biscale/articles/biscale.html).\n\nDo we even have time to make a fifth viz? Let's give it a shot.\n\nMove on to [ggtext](ggtext.html).\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"bivariate_map.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":"cosmo","title":"bivariate maps","editor":"visual"},"extensions":{"book":{"multiFile":true}}}}}