---
title: "Visualizing relationships five different ways"
format: html
editor: visual
---

## One data set, Five visualizations (technically two data sets)

Before you do anything at all...

# Update your software

Make sure you have the latest versions of R and RStudio installed.

A lot of these new tools we're using depend on the latest builds of R and RStudio to work correctly.

* [Latest version of R](https://cran.r-project.org/)
* [Latest version of RStudio](https://posit.co/download/rstudio-desktop/)

No, seriously, do it.

# Install packages 

Copy and paste the following lines of code into your RStudio console.

```{r}
#| eval: FALSE

# Checking if the packages you need are installed -- if not, it will install for you
packages <- c("tidyverse", "usethis", "devtools", 
              "remotes", "lubridate", "knitr", 
              "janitor", "geofacet", "ggrepel", 
              "png", "gifski", "sf", "tigris", 
              "cowplot", "biscale", "ggtext")

if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
  install.packages(setdiff(packages, rownames(installed.packages())), 
                   repos = "https://cran.us.r-project.org")  
}

devtools::install_github('wpinvestigative/arcos')

usethis::use_course("https://github.com/r-journalism/nicar-2023-fancier-viz/archive/master.zip")
```

The last line of code you ran will walk you through installing the class materials to your desktop. Select yes at the right points.

When you're done downloading the files, you can move on to [**geofacet**](geofacet.html). 

Later on you can follow these steps on how to download and transform the data used in these walkthroughs below.

# Data for the walkthroughs

The opioid transaction data from the DEA and opioid deaths data from the CDC needed for these walkthroughs have already been downloaded and transformed. The steps below exist for transparency.

# Preparing state data

## Get annual opioid sales data from ARCOS api

The Washington Post [published](https://www.washingtonpost.com/national/2019/07/18/how-download-use-dea-pain-pills-database/) a significant portion of a [database](https://www.washingtonpost.com/graphics/2019/investigations/dea-pain-pill-database/) that tracks the path of every opioid pain pill, from manufacturer to pharmacy, in the United States between 2006 and 2014. The data below is pulled from an [API](https://wpinvestigative.github.io/arcos/) that the Post created to make it easier to query the data.

We'll pull opioid sales data by year.

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(knitr)
library(janitor)

devtools::install_github('wpinvestigative/arcos')
library(arcos)

states <- combined_buyer_annual(key="WaPo") %>% 
  clean_names()

states %>% 
  head() %>% 
  kable()
```

## Transform the data

Next, we'll summarize the data by state and year.

```{r}
#| warning: false
#| message: false


state_names <- c(state.name, "District of Columbia")
state_abbr <- c(state.abb, "DC")

state_names <- data.frame(state=state_names, buyer_state=state_abbr)

annual_states <- states %>% 
  group_by(buyer_state, year) %>% 
  summarize(pills=sum(dosage_unit)) %>% 
  left_join(state_names) %>% 
  filter(!is.na(state))

annual_states %>% 
  head() %>% 
  kable()
```

## Get annual opioid overdose data from the CDC

NCHS data is compiled in the CDC WONDER [online tool](https://wonder.cdc.gov). To retrieve these data from the tool: 

• Select the [Multiple Cause of Death](https://wonder.cdc.gov/mcd.html) (Detailed Mortality) query system; 
• Select table layout (for example, by year, state, county); and 
• Supply the appropriate underlying codes (X and Y code) and contributing codes (T codes) 

  * X40 - X44 
  * X60 - X64 
  * X85 
  * Y10 - Y14 
  * T40.0 - T40.4, T40.6

The data imported below was exported from the CDC Wonder data portal.

```{r }
#| warning: false
#| message: false

state_cdc <- read_tsv("data/od_deaths_state.csv") %>% 
  filter(is.na(Notes)) %>% 
  clean_names()

state_cdc %>% 
  head() %>% 
  kable()
```

## Join the state data

Bringing together the sales data with the deaths data.

```{r}
state_joined <- annual_states %>% 
  left_join(state_cdc) %>% 
  select(-notes, -state_code, -year_code)

state_joined %>% 
  head() %>% 
  kable()
```

## Wrangle the data

Let's calculate rates.

Additionally, let's add in state categories and divisions.

Then, we'll save it.

```{r}
state_joined <- state_joined %>% 
  mutate(pills_per_person=round(pills/population,1)) %>% 
  mutate(death_per_1m=round(deaths/population*1000000,1)) %>% 
 # rename(death_rate=crude_rate) %>% 
  pivot_longer(cols=c("death_per_1m", "pills_per_person"),
               names_to="type",
               values_to="rate")

regions <- read_csv("https://github.com/cphalpert/census-regions/raw/master/us%20census%20bureau%20regions%20and%20divisions.csv") %>% 
  clean_names()

state_joined <- left_join(state_joined, regions)
write_csv(state_joined, "data/opioids_states.csv", na="")
```

# County data annual

Let's do the same thing but with county levle data.

## Get annual opioid sales data from ARCOS api

Once again, we'll pull from the Post ARCOS api.

```{r}
pharm_c <- summarized_county_annual(key="WaPo") %>% 
  clean_names()

pharm_c %>% 
  head() %>% 
  kable()
```

## Transform the data

## Get annual opioid overdose data from the CDC

Followed the same steps as we did for state data but for counties.

```{r }
#| warning: false
#| message: false

county_cdc <- read_tsv("data/od_deaths_county.csv") %>% 
  filter(is.na(Notes)) %>% 
  clean_names() %>% 
  rename(countyfips=county_code)

county_cdc %>% 
  head() %>% 
  kable()
```

## Join the county data

```{r}
county_joined <- pharm_c %>% 
  full_join(county_cdc) %>% 
  select(-notes, -state_code, -year_code, -age_adjusted_rate)

county_joined %>% 
  head() %>% 
  kable()
```

## Wrangle the data

Calculating rates and saving the data.

```{r}
# first have to bring in accurate population counts for counties annually
county_pops <- county_population(key = "WaPo") %>% 
  select(countyfips, year, population)

county_joined <- county_joined %>% 
  select(-population) %>% 
  left_join(county_pops) %>% 
  mutate(pills_per_person=round(dosage_unit/population,1)) %>% 
  mutate(death_per_100k=round(deaths/population*100000,1)) %>% 
 # rename(death_rate=crude_rate) %>% 
  pivot_longer(cols=c("death_per_100k", "pills_per_person"),
               names_to="type",
               values_to="rate")

write_csv(county_joined, "data/opioids_counties.csv", na="")
```

# County data combined

Let's do it one more time but for all deaths between 2006 and 2014 combined.

## Get annual opioid sales data from ARCOS api

This time we'll summarize it.

```{r}
pharm_c <- summarized_county_annual(key="WaPo") %>% 
  clean_names()

pharm_c_combined <- pharm_c %>% 
  group_by(buyer_county, buyer_state, countyfips) %>% 
  summarize(count=sum(count, na.rm=T),
            dosage_unit=sum(dosage_unit, na.rm=T))

pharm_c_combined %>% 
  head() %>% 
  kable()
```

## Get annual opioid overdose data from the CDC

```{r }
#| warning: false
#| message: false

county_cdc <- read_tsv("data/od_deaths_counties_combined.csv") %>% 
  filter(is.na(Notes)) %>% 
  clean_names() %>% 
  rename(countyfips=county_code)

county_cdc %>% 
  head() %>% 
  kable()
```

## Join the county data

```{r}
county_joined <- pharm_c_combined %>% 
  full_join(county_cdc) %>% 
  select(-notes, -state_code, -crude_rate)

county_joined %>% 
  head() %>% 
  kable()
```

## Wrangle the data

Calculating rates.

```{r}
county_pops <- county_pops %>% 
  filter(year==2014) %>% 
  select(countyfips, year, population)

county_joined <- county_joined %>% 
  select(-population) %>% 
  left_join(county_pops) %>% 
  mutate(pills_per_person=round(dosage_unit/population,1)) %>% 
  mutate(death_per_100k=round(deaths/population*100000,1)) %>% 
 # rename(death_rate=crude_rate) %>% 
  pivot_longer(cols=c("death_per_100k", "pills_per_person"),
               names_to="type",
               values_to="rate")

write_csv(county_joined, "data/opioids_counties_combined.csv", na="")
```

Next, we'll move on to first steps in visualizing these data sets.

